// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package book

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AddressBookClient is the client API for AddressBook service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddressBookClient interface {
	Get(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error)
	Put(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error)
	Del(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error)
}

type addressBookClient struct {
	cc grpc.ClientConnInterface
}

func NewAddressBookClient(cc grpc.ClientConnInterface) AddressBookClient {
	return &addressBookClient{cc}
}

func (c *addressBookClient) Get(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error) {
	out := new(Person)
	err := c.cc.Invoke(ctx, "/book.AddressBook/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressBookClient) Put(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error) {
	out := new(Person)
	err := c.cc.Invoke(ctx, "/book.AddressBook/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressBookClient) Del(ctx context.Context, in *Person, opts ...grpc.CallOption) (*Person, error) {
	out := new(Person)
	err := c.cc.Invoke(ctx, "/book.AddressBook/Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddressBookServer is the server API for AddressBook service.
// All implementations must embed UnimplementedAddressBookServer
// for forward compatibility
type AddressBookServer interface {
	Get(context.Context, *Person) (*Person, error)
	Put(context.Context, *Person) (*Person, error)
	Del(context.Context, *Person) (*Person, error)
	mustEmbedUnimplementedAddressBookServer()
}

// UnimplementedAddressBookServer must be embedded to have forward compatible implementations.
type UnimplementedAddressBookServer struct {
}

func (UnimplementedAddressBookServer) Get(context.Context, *Person) (*Person, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAddressBookServer) Put(context.Context, *Person) (*Person, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedAddressBookServer) Del(context.Context, *Person) (*Person, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (UnimplementedAddressBookServer) mustEmbedUnimplementedAddressBookServer() {}

// UnsafeAddressBookServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddressBookServer will
// result in compilation errors.
type UnsafeAddressBookServer interface {
	mustEmbedUnimplementedAddressBookServer()
}

func RegisterAddressBookServer(s grpc.ServiceRegistrar, srv AddressBookServer) {
	s.RegisterService(&_AddressBook_serviceDesc, srv)
}

func _AddressBook_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressBookServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.AddressBook/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressBookServer).Get(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressBook_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressBookServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.AddressBook/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressBookServer).Put(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressBook_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Person)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressBookServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/book.AddressBook/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressBookServer).Del(ctx, req.(*Person))
	}
	return interceptor(ctx, in, info, handler)
}

var _AddressBook_serviceDesc = grpc.ServiceDesc{
	ServiceName: "book.AddressBook",
	HandlerType: (*AddressBookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _AddressBook_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _AddressBook_Put_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _AddressBook_Del_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "person.proto",
}
